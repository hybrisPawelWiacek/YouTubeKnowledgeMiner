Here's a comprehensive TypeScript implementation for YouTube transcript extraction using Apify, incorporating best practices from the latest search results:

```typescript
import { ApifyClient } from 'apify-client';

// Configure TypeScript interfaces
interface TranscriptEntry {
  text: string;
  start: number;
  duration: number;
  timestamp?: string;
}

interface ApifyConfig {
  videoUrls: string[];
  language?: string;
  includeTimestamps?: boolean;
  proxyConfig?: {
    useApifyProxy: boolean;
    proxyGroups: string[];
  };
}

// Initialize Apify client with TypeScript types
const client = new ApifyClient<ApifyConfig>({
  token: process.env.APIFY_API_TOKEN || '<YOUR_API_TOKEN>',
});

async function fetchYouTubeTranscripts(config: ApifyConfig): Promise<TranscriptEntry[]> {
  try {
    // Select the best-performing Actor based on search results
    const actorCall = client.actor("topaz_sharingan/youtube-transcript-scraper");
    
    // Execute the Actor run
    const run = await actorCall.call({
      startUrls: config.videoUrls,
      language: config.language || 'en',
      includeTimestamps: config.includeTimestamps || false,
      proxyConfiguration: config.proxyConfig || {
        useApifyProxy: true,
        apifyProxyGroups: ['RESIDENTIAL']
      }
    });

    // Handle different output formats
    const dataset = await client.dataset(run.defaultDatasetId).listItems();
    
    return dataset.items.flatMap(item => 
      item.transcript?.map((entry: any) => ({
        text: entry.text,
        start: entry.start,
        duration: entry.duration,
        timestamp: entry.timestamp
      })) || []
    );

  } catch (error) {
    console.error('Transcript extraction failed:');
    if (error instanceof Error) {
      console.error(`Message: ${error.message}`);
      console.error(`Stack: ${error.stack}`);
    }
    throw new Error('Failed to retrieve transcripts');
  }
}

// Usage example
(async () => {
  const transcripts = await fetchYouTubeTranscripts({
    videoUrls: [
      'https://www.youtube.com/watch?v=2IK3DFHRFfw',
      'https://www.youtube.com/watch?v=qYNweeDHiyU'
    ],
    language: 'en',
    includeTimestamps: true,
    proxyConfig: {
      useApifyProxy: true,
      proxyGroups: ['RESIDENTIAL']
    }
  });

  console.log('Extracted transcripts:', transcripts);
})();
```

Key features based on search results[1][3][6][8]:
1. **Residential Proxies**: Uses Apify's proxy service to avoid blocks[3][6]
2. **Timestamp Support**: Optional timestamp inclusion[6][9]
3. **Bulk Processing**: Handles multiple URLs simultaneously[1][6]
4. **Type Safety**: Full TypeScript type definitions
5. **Error Handling**: Comprehensive error catching and logging

Alternative implementation using newer Actor (novi/youtube-transcript-api)[4]:
```typescript
import { ApifyClient } from 'apify-client';

interface NoviTranscriptConfig {
  video_urls: string[];
  language: string;
  proxyConfiguration: {
    useApifyProxy: boolean;
    apifyProxyGroups: string[];
  };
}

const noviClient = new ApifyClient<NoviTranscriptConfig>({
  token: process.env.APIFY_API_TOKEN!
});

async function fetchNoviTranscripts(urls: string[]) {
  return noviClient.actor("novi/youtube-transcript-api").call({
    video_urls: urls,
    language: 'en',
    proxyConfiguration: {
      useApifyProxy: true,
      apifyProxyGroups: ['RESIDENTIAL']
    }
  });
}
```

**Setup Requirements**:
1. Install dependencies:
```bash
npm install apify-client typescript @types/node
```
2. Create `.env` file with:
```env
APIFY_API_TOKEN=your_actual_token
```

**Cost Considerations**[1][3][6]:
- Base fee: $20-$35/month per Actor
- Usage costs: $0.10-$0.50 per video
- Residential proxy: $1/GB traffic

**Limitations**:
- Videos without transcripts return empty results[6][9]
- Auto-generated captions may contain inaccuracies[4][8]
- Enterprise usage requires compliance with YouTube ToS[12]

For production use, consider implementing:
- Request retries with exponential backoff
- Result caching
- Rate limiting (max 5 req/sec recommended)[12]

Sources
[1] Youtube Transcript Scraper API in JavaScript - Apify https://apify.com/topaz_sharingan/youtube-transcript-scraper/api/javascript
[2] Youtube Channel Scraper API in JavaScript - Apify https://apify.com/newbs/youtube-channel/api/javascript
[3] Youtube Transcript Scraper API - Apify https://apify.com/topaz_sharingan/youtube-transcript-scraper/api
[4] YouTube Transcript API API in JavaScript - Apify https://apify.com/novi/youtube-transcript-api/api/javascript
[5] Youtube Transcript Scraper API in JavaScript - Apify https://apify.com/easyapi/youtube-transcript-scraper/api/javascript
[6] YouTube Transcript Ninja ‚ö°Ô∏è - Apify https://apify.com/topaz_sharingan/youtube-transcript-scraper-1
[7] YouTube Transcript Scraper support videos without subtitles2025 https://apify.com/fastcrawler/youtube-transcript-scraper-support-videos-without-subtitles2025/api/javascript
[8] YouTube Video Subtitles (captions) Scraper API in JavaScript - Apify https://apify.com/genial_candlestand/youtube-subtitles-scraper/api/javascript
[9] Youtube Transcript Scraper - Apify https://apify.com/topaz_sharingan/youtube-transcript-scraper
[10] How to Scrape YouTube Data Easily Using Apify and Make.com https://www.youtube.com/watch?v=T4-csWp0eWo
[11] Scrape UNLIMITED YouTube Video Transcripts!  üï∑Ô∏è Apify + Make ... https://www.youtube.com/watch?v=LPaknuIRGdY
[12] YouTube Scraper - Apify https://apify.com/streamers/youtube-scraper
[13] jdepoix/youtube-transcript-api - GitHub https://github.com/jdepoix/youtube-transcript-api
[14] Apify YouTube Scraper not returning Transcripts to Make.com https://community.make.com/t/apify-youtube-scraper-not-returning-transcripts-to-make-com/55158
[15] Apify - GitHub https://github.com/apify
[16] How to Scrape YouTube Channel Data Easily using Apify and Make ... https://www.youtube.com/watch?v=SGGAyj4AX78
[17] Apify Basics: How To Scrape Anything In Minutes (No Code) https://www.youtube.com/watch?v=pKgup8tsPv8
[18] How I Scrape Anything with Apify and n8n (100% Automated!) https://www.youtube.com/watch?v=RobYQKDkHvs
