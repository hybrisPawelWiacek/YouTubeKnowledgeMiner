# Implementing Google Authentication with Supabase: A Complete Guide

Before diving into the implementation details, it's worth noting that Supabase provides a streamlined authentication system that makes integrating Google OAuth relatively straightforward. This guide covers all aspects of Google authentication integration, from initial setup to handling user metadata.

## Setting Up Google OAuth with Supabase

The first step is to configure Google OAuth credentials and integrate them with your Supabase project.

### Configuring Google Cloud Console

```javascript
// This is a setup process, not code, but here are the key steps:
// 1. Go to cloud.google.com and create/select a project
// 2. Navigate to APIs & Services > Credentials
// 3. Create OAuth client ID credentials (select "Web Application")
// 4. Add authorized redirect URI: https://<your-ref>.supabase.co/auth/v1/callback
// 5. Copy the CLIENT_ID and CLIENT_SECRET for Supabase configuration
```

### Configuring Supabase Project

In your Supabase dashboard:
1. Go to Authentication > Providers
2. Enable Google provider
3. Enter the Google CLIENT_ID and CLIENT_SECRET
4. Save the configuration[1]

### Environment Setup

```typescript
// .env file or environment configuration
SUPABASE_URL=https://your-project-ref.supabase.co
SUPABASE_ANON_KEY=your-anon-key
```

### Creating Supabase Client

```typescript
// supabaseClient.ts
import { createClient } from '@supabase/supabase-js'

const supabaseUrl = process.env.SUPABASE_URL || ''
const supabaseAnonKey = process.env.SUPABASE_ANON_KEY || ''

if (!supabaseUrl) throw new Error('Supabase URL not found.')
if (!supabaseAnonKey) throw new Error('Supabase Anon key not found.')

export const supabase = createClient(supabaseUrl, supabaseAnonKey)
```

## Implementing Google Sign-In Button

### Standard Implementation (Recommended)

```typescript
// GoogleLoginButton.tsx
import { supabase } from './supabaseClient'

const handleGoogleSignIn = async () => {
  try {
    const { data, error } = await supabase.auth.signInWithOAuth({
      provider: 'google',
      options: {
        redirectTo: `${window.location.origin}/auth/callback`,
        // Optional query parameters
        queryParams: {
          access_type: 'offline',  // For refresh token
          prompt: 'consent'  // Force consent screen
        }
      }
    })
    
    if (error) {
      console.error('Error signing in with Google:', error)
    }
  } catch (error) {
    console.error('Unexpected error during Google sign-in:', error)
  }
}

const GoogleLoginButton = () => {
  return (
    <button
      onClick={handleGoogleSignIn}
      className="google-signin-button" // Style according to Google's guidelines
    >
      <img src="/google-icon.svg" alt="Google logo" />
      <span>Sign in with Google</span>
    </button>
  )
}

export default GoogleLoginButton
```

### Custom Implementation Following Google's Branding Guidelines

```html
<!-- Include Google's JavaScript platform library -->
<script src="https://apis.google.com/js/platform.js" async defer></script>
```

```typescript
// CustomGoogleButton.tsx
import { useEffect } from 'react'
import { supabase } from './supabaseClient'

declare global {
  interface Window {
    gapi: any
    onGoogleSignIn: (googleUser: any) => void
  }
}

const CustomGoogleButton = () => {
  useEffect(() => {
    // Define the callback function
    window.onGoogleSignIn = async (googleUser) => {
      const id_token = googleUser.getAuthResponse().id_token
      
      // Sign in with Supabase using the Google token
      const { data, error } = await supabase.auth.signInWithIdToken({
        provider: 'google',
        token: id_token
      })

      if (error) {
        console.error('Error signing in:', error)
      }
    }

    // Load the Google Sign-In API
    if (window.gapi) {
      window.gapi.load('auth2', () => {
        const auth2 = window.gapi.auth2.init({
          client_id: 'YOUR_GOOGLE_CLIENT_ID.apps.googleusercontent.com',
          scope: 'profile email'
        })
        
        // Render the custom button
        auth2.attachClickHandler(
          document.getElementById('customGoogleBtn'),
          {},
          (googleUser) => window.onGoogleSignIn(googleUser),
          (error) => console.error('Error:', error)
        )
      })
    }
  }, [])

  return (
    <div id="customGoogleBtn" className="custom-google-btn">
      <span className="icon"></span>
      <span className="button-text">Sign in with Google</span>
    </div>
  )
}

export default CustomGoogleButton
```

```css
/* CSS for custom Google button following branding guidelines */
.custom-google-btn {
  display: inline-block;
  background: white;
  color: #444;
  width: 190px;
  border-radius: 5px;
  border: thin solid #888;
  box-shadow: 1px 1px 1px grey;
  white-space: nowrap;
  padding: 8px 12px;
  cursor: pointer;
}

.custom-google-btn .icon {
  background: url('https://developers.google.com/identity/images/g-logo.png') transparent 5px 50% no-repeat;
  display: inline-block;
  vertical-align: middle;
  width: 18px;
  height: 18px;
  margin-right: 8px;
}

.custom-google-btn .button-text {
  display: inline-block;
  vertical-align: middle;
  font-family: 'Roboto', sans-serif;
  font-size: 14px;
}
```

## Handling Authentication State

```typescript
// AuthStateListener.tsx
import { useEffect } from 'react'
import { supabase } from './supabaseClient'

const AuthStateListener = ({ children }) => {
  useEffect(() => {
    const { data: { subscription } } = supabase.auth.onAuthStateChange((event, session) => {
      console.log('Auth state changed:', event)
      
      switch (event) {
        case 'SIGNED_IN':
          console.log('User signed in:', session?.user)
          // Update your app state or redirect user
          break
        case 'SIGNED_OUT':
          console.log('User signed out')
          // Clear user data and redirect if needed
          break
        case 'TOKEN_REFRESHED':
          console.log('Token refreshed')
          // Handle token refresh if needed
          break
        case 'USER_UPDATED':
          console.log('User updated:', session?.user)
          // Update user information in your app
          break
      }
    })

    // Cleanup subscription on component unmount
    return () => {
      subscription.unsubscribe()
    }
  }, [])

  return <>{children}</>
}

export default AuthStateListener
```

## Retrieving User Profile Information

```typescript
// UserProfile.tsx
import { useEffect, useState } from 'react'
import { supabase } from './supabaseClient'
import { User } from '@supabase/supabase-js'

const UserProfile = () => {
  const [user, setUser] = useState<User | null>(null)
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    // Get current user
    const getCurrentUser = async () => {
      try {
        setLoading(true)
        const { data: { user }, error } = await supabase.auth.getUser()
        
        if (error) {
          console.error('Error getting user:', error)
          return
        }
        
        setUser(user)
        
        // You can also get the session which includes the user
        const { data: { session } } = await supabase.auth.getSession()
        console.log('Current session:', session)
      } catch (error) {
        console.error('Unexpected error:', error)
      } finally {
        setLoading(false)
      }
    }

    getCurrentUser()
  }, [])

  if (loading) {
    return <div>Loading user profile...</div>
  }

  if (!user) {
    return <div>No user is logged in</div>
  }

  // Access Google-provided metadata
  const fullName = user.user_metadata?.full_name || 'N/A'
  const avatarUrl = user.user_metadata?.avatar_url || 'default-avatar.png'
  const email = user.email || 'N/A'

  return (
    <div className="user-profile">
      <img src={avatarUrl} alt={fullName} className="avatar" />
      <h2>{fullName}</h2>
      <p>Email: {email}</p>
      <pre>{JSON.stringify(user.user_metadata, null, 2)}</pre>
    </div>
  )
}

export default UserProfile
```

## Handling Account Linking and User Metadata Storage

### Creating a Profiles Table in Database

```sql
-- SQL to run in Supabase SQL Editor
CREATE TABLE IF NOT EXISTS public.profiles (
  id UUID REFERENCES auth.users(id) PRIMARY KEY,
  username TEXT UNIQUE,
  full_name TEXT,
  avatar_url TEXT,
  email TEXT UNIQUE,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW())
);

-- Create a secure RLS policy
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;

-- Allow users to read their own profile
CREATE POLICY "Users can view their own profile" 
ON public.profiles FOR SELECT 
USING (auth.uid() = id);

-- Allow users to update their own profile
CREATE POLICY "Users can update their own profile" 
ON public.profiles FOR UPDATE 
USING (auth.uid() = id);
```

### Setting Up Database Trigger for New Users

```sql
-- Create a function that will be triggered when a new user is created
CREATE OR REPLACE FUNCTION public.handle_new_user() 
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO public.profiles (id, username, full_name, avatar_url, email)
  VALUES (
    NEW.id, 
    NEW.raw_user_meta_data->>'preferred_username',
    NEW.raw_user_meta_data->>'full_name',
    NEW.raw_user_meta_data->>'avatar_url',
    NEW.email
  );
  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Create a trigger that calls this function after a new user is inserted
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE PROCEDURE public.handle_new_user();
```

### Manual Account Linking

```typescript
// LinkGoogleAccount.tsx
import { useState } from 'react'
import { supabase } from './supabaseClient'

const LinkGoogleAccount = () => {
  const [linking, setLinking] = useState(false)
  const [error, setError] = useState<string | null>(null)
  
  const handleLinkGoogle = async () => {
    try {
      setLinking(true)
      setError(null)
      
      // This will initiate the OAuth flow to link Google identity
      const { data, error } = await supabase.auth.linkIdentity({
        provider: 'google'
      })
      
      if (error) {
        console.error('Error linking account:', error)
        setError(error.message)
        return
      }
      
      console.log('Successfully linked Google account', data)
    } catch (err) {
      console.error('Unexpected error:', err)
      setError('An unexpected error occurred')
    } finally {
      setLinking(false)
    }
  }
  
  return (
    <div>
      <button 
        onClick={handleLinkGoogle} 
        disabled={linking}
      >
        {linking ? 'Linking...' : 'Link Google Account'}
      </button>
      {error && <p className="error">{error}</p>}
    </div>
  )
}

export default LinkGoogleAccount
```

### Viewing and Managing Linked Identities

```typescript
// LinkedAccounts.tsx
import { useState, useEffect } from 'react'
import { supabase } from './supabaseClient'

interface Identity {
  id: string
  provider: string
  identity_data: any
}

const LinkedAccounts = () => {
  const [identities, setIdentities] = useState<Identity[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  
  useEffect(() => {
    const getLinkedAccounts = async () => {
      try {
        setLoading(true)
        const { data, error } = await supabase.auth.getUserIdentities()
        
        if (error) {
          setError(error.message)
          return
        }
        
        if (data?.identities) {
          setIdentities(data.identities)
        }
      } catch (err) {
        console.error('Error fetching identities:', err)
        setError('Failed to load linked accounts')
      } finally {
        setLoading(false)
      }
    }
    
    getLinkedAccounts()
  }, [])
  
  const unlinkAccount = async (identity: Identity) => {
    try {
      // Can only unlink if there are at least 2 identities
      if (identities.length < 2) {
        setError('Cannot remove your only sign-in method')
        return
      }
      
      const { error } = await supabase.auth.unlinkIdentity(identity)
      
      if (error) {
        setError(error.message)
        return
      }
      
      // Update the list after successful unlink
      setIdentities(identities.filter(id => id.id !== identity.id))
    } catch (err) {
      console.error('Error unlinking account:', err)
      setError('Failed to unlink account')
    }
  }
  
  if (loading) return <div>Loading linked accounts...</div>
  
  return (
    <div className="linked-accounts">
      <h2>Your Linked Accounts</h2>
      {error && <p className="error">{error}</p>}
      
      {identities.length === 0 ? (
        <p>No linked accounts found</p>
      ) : (
        <ul>
          {identities.map(identity => (
            <li key={identity.id}>
              <div>
                <strong>Provider:</strong> {identity.provider}
                {identity.provider === 'google' && (
                  <img 
                    src={identity.identity_data?.avatar_url} 
                    alt="Google profile" 
                    style={{ width: 30, height: 30, borderRadius: '50%', marginLeft: 10 }}
                  />
                )}
              </div>
              <button 
                onClick={() => unlinkAccount(identity)}
                disabled={identities.length < 2}
              >
                Unlink
              </button>
            </li>
          ))}
        </ul>
      )}
    </div>
  )
}

export default LinkedAccounts
```

## Conclusion

Implementing Google authentication with Supabase provides a secure and user-friendly way to handle user sign-ins. The key aspects covered in this guide include:

- Setting up Google OAuth credentials and configuring Supabase
- Creating compliant sign-in buttons that follow Google's branding guidelines
- Handling authentication state changes throughout your application
- Retrieving and storing user profile information
- Managing account linking for users with multiple authentication methods

By following these implementation patterns, you can create a robust authentication system that leverages Google's secure OAuth service while maintaining flexibility and control within your application.

Remember to always store sensitive credentials in environment variables and never expose them in client-side code. Additionally, consider implementing proper error handling and user feedback throughout the authentication flow for the best user experience.

Sources
[1] Part Five: Google Oauth - Supabase Docs - Vercel https://docs-n3gxhwtbf-supabase.vercel.app/docs/learn/auth-deep-dive/auth-google-oauth
[2] Identity Linking | Supabase Docs https://supabase.com/docs/guides/auth/auth-identity-linking
[3] Implement Sign in with Google using Supabase Auth in NextJS https://dev.to/irwanphan/implement-sign-in-with-google-using-supabase-auth-in-nextjs-1jj1
[4] Building a custom Google Sign-In button | Authentication https://developers.google.com/identity/sign-in/web/build-button
[5] JavaScript: Listen to auth events | Supabase Docs https://supabase.com/docs/reference/javascript/v1/auth-onauthstatechange
[6] In my Supabase project, user information stored in auth doesn't ... https://stackoverflow.com/questions/76892961/in-my-supabase-project-user-information-stored-in-auth-doesnt-seem-to-be-autom
[7] Master Supabase Google Auth with Practical Examples https://nextjsstarter.com/blog/master-supabase-google-auth-with-practical-examples/
[8] Creating a user based on another OAuth credentials : r/Supabase https://www.reddit.com/r/Supabase/comments/1gdgrif/creating_a_user_based_on_another_oauth_credentials/
[9] Help with Google OAuth - Supabase - Reddit https://www.reddit.com/r/Supabase/comments/1bk606a/help_with_google_oauth/
[10] Google Identity Custom Login with JavaScript - Stack Overflow https://stackoverflow.com/questions/68895490/google-identity-custom-login-with-javascript
[11] Supabase onAuthStateChanged Guide — Restack https://www.restack.io/docs/supabase-knowledge-supabase-onauthstatechanged-guide
[12] Users | Supabase Docs https://supabase.com/docs/guides/auth/users
[13] Flutter: Listen to auth events | Supabase Docs https://supabase.com/docs/reference/dart/auth-onauthstatechange
[14] Auth | Supabase Docs https://supabase.com/docs/guides/auth
[15] Supabase Auth: onAuthStateChange not triggered - Stack Overflow https://stackoverflow.com/questions/76968337/supabase-auth-onauthstatechange-not-triggered
[16] JavaScript: Retrieve a user | Supabase Docs https://supabase.com/docs/reference/javascript/auth-getuser
[17] Supabase OAuth2 Integration Guide — Restack https://www.restack.io/docs/supabase-knowledge-supabase-oauth2-integration
[18] Social Login | Supabase Docs https://supabase.com/docs/guides/auth/social-login
[19] Create google auth using supabase on backend written on nest https://www.reddit.com/r/Supabase/comments/1e1elyi/create_google_auth_using_supabase_on_backend/
[20] Sign in with Google Branding Guidelines https://developers.google.com/identity/branding-guidelines
[21] Login with Google | Supabase Docs https://supabase.com/docs/guides/auth/social-login/auth-google
[22] How To Set Up Google OAuth Login (Supabase Tutorial) - YouTube https://www.youtube.com/watch?v=sB6bPOvvlgw
[23] Not compliant with google signin branding requirements https://meta.discourse.org/t/not-compliant-with-google-signin-branding-requirements/99177
[24] Setting up Google Oauth using WeWeb and Supabase - YouTube https://www.youtube.com/watch?v=pHkkD2FFOWM
[25] Using Google Oauth with supabase, can't login with different account https://stackoverflow.com/questions/77141752/using-google-oauth-with-supabase-cant-login-with-different-account
[26] Documentation to make authentication with Google incomplete #1066 https://github.com/supabase/supabase/issues/12304
[27] A Step-by-Step Guide to Google OAuth2 Authentication with ... https://dev.to/idrisakintobi/a-step-by-step-guide-to-google-oauth2-authentication-with-javascript-and-bun-4he7
[28] JavaScript: Listen to auth events | Supabase Docs https://supabase.com/docs/reference/javascript/auth-onauthstatechange
[29] JavaScript: TypeScript support | Supabase Docs https://supabase.com/docs/reference/javascript/typescript-support
[30] Supabase onAuthStateChanged - How do I properly wait for the ... https://stackoverflow.com/questions/72385641/supabase-onauthstatechanged-how-do-i-properly-wait-for-the-request-to-finish-p
[31] Typescript: Session Types · supabase · Discussion #2222 - GitHub https://github.com/orgs/supabase/discussions/2222
[32] Supabase operations in onAuthStateChange will cause the next call ... https://github.com/supabase/auth-js/issues/762
[33] User Management | Supabase Docs https://supabase.com/docs/guides/auth/managing-user-data
[34] Call auth.onAuthStateChange at least once when listener is ... - GitHub https://github.com/supabase/gotrue-js/issues/313
[35] Best practices for adding "username" to profiles table at signup? https://github.com/orgs/supabase/discussions/3491
[36] Use Supabase Auth with React https://supabase.com/docs/guides/auth/quickstarts/react
[37] Do I need to create a user table when working with supabase? https://www.reddit.com/r/Supabase/comments/16nl5fz/do_i_need_to_create_a_user_table_when_working/
[38] How to authenticate React applications with Supabase Auth https://blog.logrocket.com/authenticate-react-applications-supabase-auth/
